#!/usr/bin/env php
<?php
// Local wrapper to invoke the WPMoo CLI without requiring the framework.

use WPMoo\CLI\CLI;

$autoload_loaded = false;
$candidates      = array_unique(
	array(
		__DIR__ . '/../vendor/autoload.php',
		dirname( __DIR__, 2 ) . '/autoload.php',
	)
);
foreach ( $candidates as $autoload ) {
	if ( file_exists( $autoload ) ) {
		require $autoload; // phpcs:ignore WordPressVIPMinimum.Files.IncludingFile.UsingIncludeOnce
		$autoload_loaded = true;
		break;
	}
}
if ( ! $autoload_loaded ) {
	fwrite( STDERR, "Could not locate Composer autoload file. Run 'composer install'.\n" );
	exit( 1 );
}

// Ensure correct PSR-4 mapping for wpmoo-cli regardless of vendor version layout.
if ( class_exists( '\\Composer\\Autoload\\ClassLoader' ) ) {
    $loaders = \Composer\Autoload\ClassLoader::getRegisteredLoaders();
    // Use the first available loader.
    $loader = reset( $loaders );
    if ( $loader instanceof \Composer\Autoload\ClassLoader ) {
        $cliBase = __DIR__ . '/../vendor/wpmoo/wpmoo-cli/src';
        $cliDir  = $cliBase . '/CLI';
        if ( is_dir( $cliDir ) ) {
            // New layout: namespace prefix maps to src/CLI
            $loader->addPsr4( 'WPMoo\\CLI\\', $cliDir, true );
        } elseif ( is_dir( $cliBase ) ) {
            // Old layout: namespace prefix maps to src/
            $loader->addPsr4( 'WPMoo\\CLI\\', $cliBase, true );
        }
    }
}

if ( ! class_exists( CLI::class ) ) {
	$cli_file = __DIR__ . '/../vendor/wpmoo/wpmoo-cli/src/CLI/CLI.php';
	if ( file_exists( $cli_file ) ) {
		require $cli_file; // phpcs:ignore WordPressVIPMinimum.Files.IncludingFile.UsingIncludeOnce
	}
}

CLI::run( $argv );
